using System;
using System.Collections.Generic;
using System.Text;

namespace TM_Comms
{
    public partial class ListenNode
    {
        public enum CommandList
        {
            FUNCTIONS = 2,
            MATH_FUNCTIONS = 3,
            MODBUS_FUNCTIONS = 4,
            SERIAL_PORT_FUNCTIONS = 5,
            PARAMETERIZED_OBJECTS = 6,
            LISTEN_NODE = 7,
            ROBOT_MOTION_FUNCTIONS = 8,
        }

        public static Dictionary<TMflowVersions, List<string>> Commands = new Dictionary<TMflowVersions, List<string>>()
        {
            {TMflowVersions.V1_82_xxxx, new List<string>()
                {
{ "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16( byte[], int, int )" },
{ "int Byte_ToInt16( byte[], int )" },
{ "int Byte_ToInt16( byte[] )" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32( byte[], int )" },
{ "int Byte_ToInt32( byte[] )" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat( byte[], int )" },
{ "float Byte_ToFloat( byte[] )" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble( byte[], int )" },
{ "double Byte_ToDouble( byte[] )" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array( byte[], int, int )" },
{ "int[] Byte_ToInt16Array( byte[], int )" },
{ "int[] Byte_ToInt16Array( byte[] )" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(  byte[], int )" },
{ "int[] Byte_ToInt32Array( byte[] )" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray( byte[], int  )" },
{ "float[] Byte_ToFloatArray( byte[] )" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray( byte[], int  )" },
{ "double[] Byte_ToDoubleArray( byte[] )" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString( byte[], int )" },
{ "string Byte_ToString( byte[] )" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat( byte[], byte )" },
{ "byte[] Byte_Concat( byte[], byte[] )" },
{ "byte[] Byte_Concat( byte[], byte[], int )" },
{ "byte[] Byte_Concat( byte[], int, int, byte[], int, int )" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger( string, int )" },
{ "int String_ToInteger( string )" },
{ "int[] String_ToInteger( string[], int )" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat( string, int )" },
{ "float String_ToFloat( string )" },
{ "float[] String_ToFloat( string[], int )" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble( string, int )" },
{ "double String_ToDouble( string )" },
{ "double[] String_ToDouble( string[], int )" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte( string, int )" },
{ "byte[] String_ToByte( string )" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf( string, string )" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf( string, string )" },
{ "2.17 String_Substring()" },
{ "string String_Substring( string, int,  int )" },
{ "string String_Substring( string, int )" },
{ "string String_Substring( string, string, int )" },
{ "string String_Substring( string, string )" },
{ "string String_Substring( string, string, string, int )" },
{ "string String_Substring( string, string, string )" },
{ "2.18 String_Split()" },
{ "string[] String_Split( string,  string, int )" },
{ "string[] String_Split( string, string )" },
{ "2.19 String_Replace()" },
{ "string String_Replace( string, string, string )" },
{ "2.20 String_Trim()" },
{ "string String_Trim( string )" },
{ "string String_Trim( string, string )" },
{ "string String_Trim( string, string, string )" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower( string )" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper( string )" },
{ "2.23 Array_Append()" },
{ "?[] Array_Append( ?[], ? or ?[] )" },
{ "2.24 Array_Insert()" },
{ "?[] Array_Insert( ?[], int, ? or ?[] )" },
{ "2.25 Array_Remove()" },
{ "?[] Array_Remove( ?[], int, int )" },
{ "?[] Array_Remove( ?[],  int )" },
{ "2.26 Array_Equals()" },
{ "bool Array_Equals( ?[], ?[] )" },
{ "bool Array_Equals( ?[],vv int, ?[], int, int )" },
{ "2.27 Array_IndexOf()" },
{ "int Array_IndexOf( ?[], ? )" },
{ "2.28 Array_LastIndexOf()" },
{ "int Array_LastIndexOf( ?[], ? )" },
{ "2.29 Array_Reverse()" },
{ "?[] Array_Reverse( ?[] )" },
{ "?[] Array_Reverse( ?[],  int )" },
{ "2.30 Array_Sort()" },
{ "?[] Array_Sort( ?[], int )" },
{ "?[] Array_Sort( ?[] )" },
{ "2.31 Array_SubElements()" },
{ "?[] Array_SubElements( ?[], int, int )" },
{ "?[] Array_SubElements( ?[], int )" },
{ "2.32 ValueReverse()" },
{ "int ValueReverse(  int, int )" },
{ "int ValueReverse( int )" },
{ "float ValueReverse( float )" },
{ "double ValueReverse( double )" },
{ "string ValueReverse( string )" },
{ "int[] ValueReverse( int[], int )" },
{ "int[] ValueReverse( int[] )" },
{ "float[] ValueReverse( float[] )" },
{ "double[] ValueReverse( double[] )" },
{ "string[] ValueReverse( string[] )" },
{ "2.33 GetBytes()" },
{ "byte[] GetBytes( ?, int )" },
{ "byte[] GetBytes( ? )" },
{ "byte[] GetBytes(  int, int, int )" },
{ "byte[] GetBytes( int[], int, int )" },
{ "2.34 GetString()" },
{ "string GetString( ?, int, int )" },
{ "string GetString( ?, int )" },
{ "string GetString( ? )" },
{ "string GetString( ?, string, int, int )" },
{ "string GetString( ?, string, int )" },
{ "string GetString( ?, string )" },
{ "string GetString( ?, string, string, int, int )" },
{ "string GetString( ?, string, string, int )" },
{ "string GetString( ?, string, string  )" },
{ "2.35 GetToken()" },
{ "string GetToken( string, string, string, int, int )" },
{ "string GetToken( string, string, string, int )" },
{ "string GetToken( string, string, string )" },
{ "string GetToken( string, byte[], byte[], int, int )" },
{ "string GetToken( string, byte[], byte[], int )" },
{ "string GetToken( string, byte[], byte[] )" },
{ "byte[] GetToken( byte[], string, string, int, int )" },
{ "byte[] GetToken( byte[], string, string, int )" },
{ "byte[] GetToken( byte[], string, string )" },
{ "byte[] GetToken( byte[], byte[], byte[], int, int )" },
{ "byte[] GetToken( byte[], byte[], byte[], int )" },
{ "byte[] GetToken( byte[], byte[], byte[] )" },
{ "2.36 GetAllTokens()" },
{ "string[] GetAllTokens( string, string, string, int )" },
{ "string[] GetAllTokens( string, string, string )" },
{ "2.37 GetNow()" },
{ "string GetNow( string )" },
{ "string GetNow( )" },
{ "2.38 GetNowStamp()" },
{ "int GetNowStamp( )" },
{ "double GetNowStamp( bool )" },
{ "int GetNowStamp( int )" },
{ "double GetNowStamp( double )" },
{ "bool GetNowStamp( int, int )" },
{ "bool GetNowStamp( double, double )" },
{ "2.39 GetVarValue()" },
{ "? GetVarValue( string )" },
{ "2.40 Length()" },
{ "int Length( ? )" },
{ "2.41 Ctrl()" },
{ "string Ctrl( int )" },
{ "string Ctrl( string )" },
{ "string Ctrl( byte[] )" },
{ "2.42 XOR8()" },
{ "byte XOR8( byte[], int, int )" },
{ "byte XOR8( byte[], int )" },
{ "byte XOR8( byte[] )" },
{ "2.43 SUM8()" },
{ "byte SUM8( byte[], int, int )" },
{ "byte SUM8( byte[], int  )" },
{ "byte SUM8( byte[] )" },
{ "2.44 SUM16()" },
{ "byte[] SUM16( byte[], int, int )" },
{ "byte[] SUM16( byte[], int )" },
{ "byte[] SUM16( byte[] )" },
{ "2.45 SUM32()" },
{ "byte[] SUM32( byte[], int, int )" },
{ "byte[] SUM32( byte[], int )" },
{ "byte[] SUM32( byte[] )" },
{ "2.46 CRC16()" },
{ "byte[] CRC16( int, byte[], int, int )" },
{ "byte[] CRC16( int, byte[], int )" },
{ "byte[] CRC16( int, byte[] )" },
{ "byte[] CRC16( byte[], int, int )" },
{ "byte[] CRC16( byte[], int )" },
{ "byte[] CRC16( byte[] )" },
{ "2.47 CRC32()" },
{ "byte[] CRC32( byte[], int, int )" },
{ "byte[] CRC32( byte[], int )" },
{ "byte[] CRC32(  byte[] )" },
{ "2.48 ListenPacket()" },
{ "string ListenPacket( string, string )" },
{ "string ListenPacket( string )" },
{ "2.49 ListenSend()" },
{ "int ListenSend( string, int, ? )" },
{ "int ListenSend( int, ? )" },
{ "2.50 VarSync()" },
{ "int VarSync( int, int, ? )" },
{ "int VarSync( int, ? )" },
{ "int VarSync( ? )" },
{ "3.1 abs()" },
{ "int abs( int )" },
{ "float abs( float )" },
{ "double abs( double  )" },
{ "3.2 pow()" },
{ "int pow( int, double )" },
{ "float pow( float, double )" },
{ "double pow( double, double )" },
{ "3.3 sqrt()" },
{ "float sqrt( float )" },
{ "double sqrt( double )" },
{ "3.4 ceil()" },
{ "float ceil( float )" },
{ "double ceil( double )" },
{ "3.5 floor()" },
{ "float floor( float )" },
{ "double floor(  double )" },
{ "3.6 round()" },
{ "float round( float, int )" },
{ "float round( float )" },
{ "double round( double, int )" },
{ "double round( double )" },
{ "3.7 random()" },
{ "float random( )" },
{ "int random( int )" },
{ "int random( int, int )" },
{ "3.8 d2r()" },
{ "float d2r( float )" },
{ "double d2r( double )" },
{ "3.9 r2d()" },
{ "float r2d( float )" },
{ "double r2d( double )" },
{ "3.10 sin()" },
{ "float sin( float )" },
{ "double sin( double )" },
{ "3.11 cos()" },
{ "float cos( float )" },
{ "double cos( double )" },
{ "3.12 tan()" },
{ "float tan( float )" },
{ "double tan( double )" },
{ "3.13 asin()" },
{ "float asin( float )" },
{ "double asin( double )" },
{ "3.14 acos()" },
{ "float acos( float )" },
{ "double acos( double )" },
{ "3.15 atan()" },
{ "float atan( float )" },
{ "double atan( double )" },
{ "3.16 atan2()" },
{ "float atan2( float, float )" },
{ "double atan2( double, double )" },
{ "3.17 log()" },
{ "float log( float, double )" },
{ "double log( double, double )" },
{ "float log( float )" },
{ "double log( double )" },
{ "3.18 log10()" },
{ "float log10( float )" },
{ "double log10( double )" },
{ "3.19 norm2()" },
{ "float norm2( float[] )" },
{ "3.20 dist()" },
{ "float dist( float[], float[] )" },
{ "3.21 trans()" },
{ "float[] trans( float[], float[], bool )" },
{ "float[] trans( float[], float[] )" },
{ "3.22 inversetrans()" },
{ "float[] inversetrans( float[], bool )" },
{ "float[] inversetrans( float[] )" },
{ "3.23 applytrans()" },
{ "float[] applytrans( float[], float[], bool )" },
{ "float[] applytrans( float[], float[] )" },
{ "3.24 interpoint()" },
{ "float[] interpoint( float[], float[], float )" },
{ "3.25 changeref()" },
{ "float[] changeref( float[], float[], float[] )" },
{ "float[] changeref( float[], float[] {X, Y, Z, RX, RY, RZ}A X Y Z (A)" },
{ "3.26 points2coord()" },
{ "float[] points2coord( float[], {X, Y, Z, RX, RY, RZ}A X Y Z (A)" },
{ "float[] points2coord( float, float, float, float, float, float, float, float, float )" },
{ "3.27 intercoord()" },
{ "float[] intercoord( float[], float[]  )" },
{ "4.1 File_ReadBytes()" },
{ "byte[] File_ReadBytes( string )" },
{ "4.2 File_ReadText()" },
{ "string File_ReadText( string )" },
{ "4.3 File_ReadLines()" },
{ "string[] File_ReadLines( string )" },
{ "string[] File_ReadLines( string, int, int )" },
{ "string[] File_ReadLines( string, int )" },
{ "4.4 File_NextLine()" },
{ "string File_NextLine( string )" },
{ "string File_NextLine( string, bool )" },
{ "string File_NextLine( )" },
{ "string[] File_NextLine( string, int )" },
{ "string[] File_NextLine( int )" },
{ "4.5 File_NextEOF()" },
{ "bool File_NextEOF( )" },
{ "4.6 File_WriteBytes()" },
{ "bool File_WriteBytes( string, ?, int, int, int )" },
{ "bool File_WriteBytes( string, ?, int, int )" },
{ "bool File_WriteBytes( string, ?, int )" },
{ "bool File_WriteBytes( string, ? )" },
{ "4.7 File_WriteText()" },
{ "bool File_WriteText( string, ?, int, int, int )" },
{ "bool File_WriteText( writebytes3.txt Offset(h) 00  01  02  03  04  05  06  07  08  09  0A  0B  0C  0D  0E  0F" },
{ "bool File_WriteText( string, ?, int )" },
{ "bool File_WriteText( string, ? )" },
{ "4.8 File_WriteLine()" },
{ "bool File_WriteLine( string, ?, int, int, int )" },
{ "bool File_WriteLine( string, ?, int, int )" },
{ "bool File_WriteLine( string, ?, int )" },
{ "bool File_WriteLine( string, ? )" },
{ "4.9 File_WriteLines()" },
{ "bool File_WriteLines( string, ?, int, int, int )" },
{ "writeline2.txt 1| {100,200} 2| 10000 3| {1.23,4.56,-7.89} 4| true 5| ABCDEFG 6| {ABC,DEF,達明機器人} 7|  bool File_WriteLines( string, ?, int, int )" },
{ "bool File_WriteLines( string, ?, int )" },
{ "bool File_WriteLines( string, ? )" },
{ "4.10 File_Exists()" },
{ "bool File_Exists( string )" },
{ "4.11 File_Length()" },
{ "int File_Length( writelines2.txt 1| 100 2| 200 3| 10000 4| 1.23 5| 4.56 6| -7.89 7| ABCDEFG 8| ABC 9| DEF 10| 達明機器人 11|  string )" },
{ "4.12 File_Delete()" },
{ "bool File_Delete( string ... )" },
{ "bool File_Delete( string[] )" },
{ "4.13 File_Copy()" },
{ "bool File_Copy( string, string, string )" },
{ "bool File_Copy( string,  string )" },
{ "4.14 File_CopyImage()" },
{ "bool File_CopyImage( string, string, string, int )" },
{ "bool File_CopyImage( string, string, string )" },
{ "bool File_CopyImage( string, string )" },
{ "bool File_CopyImage( string,  string, int )" },
{ "4.15 File_Replace()" },
{ " bool File_Replace( string, string, string )" },
{ "4.16 File_GetToken()" },
{ "string File_GetToken( string, string, string, int, int )" },
{ "string File_GetToken( string, string, string, int )" },
{ " string File_GetToken( string, string, string )" },
{ "string File_GetToken( string, byte[], byte[], int, int )" },
{ "string File_GetToken( string, byte[], byte[], int )" },
{ "string File_GetToken( string, byte[], byte[] )" },
{ "4.17 File_GetAllTokens()" },
{ "string[] File_GetAllTokens( string, string, string, int )" },
{ "string[] File_GetAllTokens( string, string, string )" },
{ "5.1 com_read()" },
{ "byte[] com_read( string )" },
{ "byte[] com_read( string, int, int )" },
{ "byte[] com_read( string, int )" },
{ "byte[] com_read( string, byte[] or string, byte[] or string, int, int )" },
{ "byte[] com_read( string, byte[] or string, byte[] or string, int )" },
{ "byte[] com_read( string, byte[] or string, byte[] or string )" },
{ "byte[] com_read( string, byte[] or string, int, int )" },
{ "byte[] com_read( string, byte[] or string, int )" },
{ "byte[] com_read( string, byte[] or string )" },
{ "5.2 com_read_string()" },
{ "string com_read_string( string )" },
{ "string com_read_string( string,  int, int )" },
{ "string com_read_string( string, int )" },
{ "string com_read_string( string, byte[] or string, byte[] or string, int, int )" },
{ "string com_read_string( string, byte[] or string, byte[] or string, int )" },
{ "string com_read_string( string, byte[] or string, byte[] or string )" },
{ "string com_read_string( string, byte[] or string, int, int )" },
{ "string com_read_string( string, byte[] or string, int )" },
{ "string com_read_string( string, byte[] or string )" },
{ "5.3 com_write()" },
{ "bool com_write( string, ?, int, int )" },
{ "bool com_write( string, ?,  int, int )" },
{ "bool com_write( string, ? )" },
{ "5.4 com_writeline()" },
{ "bool com_writeline( string, ?, int, int )" },
{ "bool com_writeline( string, ?, int, )" },
{ "bool com_writeline( string, ?, )" },
{ "6.1 socket_read()" },
{ "byte[] socket_read( string )" },
{ "byte[] socket_read( string, int, int )" },
{ "byte[] socket_read( string, int )" },
{ "byte[] socket_read( string,  byte[] or string, byte[] or string, int, int )" },
{ "byte[] socket_read( string, byte[] or string, byte[] or string, int )" },
{ "byte[] socket_read( string, byte[] or string, byte[] or string )" },
{ "byte[] socket_read( string, byte[] or string, int, int )" },
{ "byte[] socket_read( string, byte[] or string, int )" },
{ "byte[] socket_read( string, byte[] or string )" },
{ "6.2 socket_read_string()" },
{ "string socket_read_string( string )" },
{ "string socket_read_string( string, int, int )" },
{ "string socket_read_string( string, int )" },
{ "string socket_read_string( string, byte[] or string, byte[] or string, int, int )" },
{ "string socket_read_string( string, byte[] or string, byte[] or string, int )" },
{ "string socket_read_string( string, byte[] or string, byte[] or string )" },
{ "string socket_read_string( string, byte[] or string, int, int )" },
{ "string socket_read_string( string, byte[] or string, int )" },
{ "string socket_read_string( string, byte[] or string )" },
{ "6.3 socket_send()" },
{ "int socket_send( string, ?, int, int )" },
{ "int socket_send( string, ?, int )" },
{ "int socket_send( string, ? )" },
{ "6.4 socket_sendline()" },
{ "int socket_sendline( string, ?, int, int )" },
{ "int socket_sendline( string, ?, int )" },
{ "int socket_sendline( string, ? )" },
{ "7.1 Point" },
{ "Point[string].attribute" },
{ "7.2 Base" },
{ "Base[string].attribute" },
{ "7.3 TCP" },
{ "TCP[string].attribute" },
{ "7.4 VPoint" },
{ "VPoint[string].attribute" },
{ "7.5 IO" },
{ "IO[string].attribute" },
{ "7.6 Robot" },
{ "Robot[int].attribute" },
{ "7.7 FT" },
{ "FT[string].attribute" },
{ "8.1 Listen Node" },
{ "8.2 ScriptExit()" },
{ "bool ScriptExit( )" },
{ "8.3 Communication Protocol" },
{ "8.4 TMSCT" },
{ "8.5 TMSTA" },
{ "8.6 CPERR" },
{ "8.7 Priority Commands" },
{ "ScriptExit(0)" },
{ "ScriptExit(1)" },
{ "StopAndClearBuffer(0)" },
{ "StopAndClearBuffer(1)" },
{ "StopAndClearBuffer(2)" },
{ "9.1 QueueTag()" },
{ "bool QueueTag( int, int )" },
{ "bool QueueTag( int )" },
{ "9.2 WaitQueueTag()" },
{ "int WaitQueueTag( int, int )" },
{ "int WaitQueueTag( int )" },
{ "9.3 StopAndClearBuffer()" },
{ "bool StopAndClearBuffer( )" },
{ "9.4 Pause()" },
{ "bool Pause( )" },
{ "9.5 Resume()" },
{ "bool Resume( )" },
{ "9.6 PTP()" },
{ "bool PTP( string, float[], int, int, int, bool )" },
{ "bool PTP( string, float[], int, int, int, bool, int[] )" },
{ "bool PTP( string, float, float, float, float, float, float, int, int, int, bool )" },
{ "bool PTP( string, float, float, float, float, float, float, int, int, int, bool, int, int, int )" },
{ "9.7 Line()" },
{ "bool Line( string, float[], int, int, int, bool )" },
{ "bool Line( string, float, float, float, float, float, float, int, int, int, bool )" },
{ "9.8 Circle()" },
{ "bool Circle( string, float[], float[], int, int, int, int, bool )" },
{ "bool Circle( string, float, float, float, float, float, float, float, float, float, float, float, float, int, int, int, int, bool )" },
{ "9.9 PLine()" },
{ "bool PLine( string, float[], int, int, int )" },
{ "bool PLine( string, float, float, float, float, float, float, int, int, int   251 )" },
{ "9.10 Move_PTP()" },
{ "bool Move_PTP( string, float[], int, int, int, bool )" },
{ "bool Move_PTP( string, float, float, float, float, float, float, int, int, int, bool )" },
{ "9.11 Move_Line()" },
{ "bool Move_Line( string, float[], int,   254 int, int, bool )" },
{ "bool Move_Line( string, float, float, float, float, float, float, int,   255 int, int, bool )" },
{ "9.12 Move_PLine()" },
{ "bool Move_PLine( string, float[], int, int, int )" },
{ "bool Move_PLine( string, float, float, float, float, float, float,   257 int, int, int, )" },
{ "9.13 ChangeBase()" },
{ "bool ChangeBase( string )" },
{ "bool ChangeBase( float[] )" },
{ "bool ChangeBase( float, float, float, float, float, float )" },
{ "9.14 ChangeTCP()" },
{ "bool ChangeTCP( string )" },
{ "bool ChangeTCP( float[] )" },
{ "bool ChangeTCP( float[], float )" },
{ "bool ChangeTCP( float[], float, float[] )" },
{ "bool ChangeTCP( float, float, float, float, float, float )" },
{ "bool ChangeTCP( float, float, float, float, float, float, float   261 )" },
{ "bool ChangeTCP( float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float )" },
{ "9.15 ChangeLoad()" },
{ "bool ChangeLoad( float   262 )" },
{ "9.16 PVTEnter()" },
{ "bool PVTEnter( int )" },
{ "bool PVTEnter( )" },
{ "9.17 PVTExit()" },
{ "bool PVTExit( )" },
{ "9.18 PVTPoint()" },
{ "bool PVTPoint( float[], float[], float )" },
{ "bool PVTPoint( float, float, float, float, float, float, float, float, float, float, float, float, float )" },
{ "9.19 PVTPause()" },
{ "bool PVTPause( )" },
{ "9.20 PVTResume()" },
{ "bool PVTResume( )" },
{ "9.21 Vision_DoJob()" },
{ "bool Vision_DoJob( string )" },
{ "9.22 Vision_DoJob_PTP()" },
{ "bool Vision_DoJob_PTP( string, int, int, bool )" },
{ "9.23 Vision_DoJob_Line()" },
{ "bool Vision_DoJob_Line( string, int )" },
{ "bool Vision_DoJob_Line( string, int, int )" },
{ "9.24 Vision_IsJobAvailable()" },
{ "bool Vision_IsJobAvailable( string )" },
{ "10.1 modbus_read()" },
{ "? modbus_read( string, string )" },
{ "byte[] modbus_read( string, byte, string, int, int )" },
{ "10.2 modbus_read_int16()" },
{ "int[] modbus_read_int16( string, byte, string, int, int, int )" },
{ "int[] modbus_read_int16( string, byte, string, int, int )" },
{ "10.3 modbus_read_int32()" },
{ "int[] modbus_read_int32( string, byte, string, int, int, int )" },
{ "int[] modbus_read_int32( string, byte, string, int, int )" },
{ "10.4 modbus_read_float()" },
{ "float[] modbus_read_float( string, byte, string, int, int, int )" },
{ "float[] modbus_read_float( string, byte, string, int, int )" },
{ "10.5 modbus_read_double()" },
{ "double[] modbus_read_double( string, byte, string, int, int, int )" },
{ "double[] modbus_read_double( string, byte, string, int, int )" },
{ "10.6 modbus_read_string()" },
{ "string modbus_read_string( string, byte, string, int, int, int )" },
{ "string modbus_read_string( string, byte, string,   282 int, int )" },
{ "10.7 modbus_write()" },
{ "bool modbus_write( string, string, ?, int )" },
{ "bool modbus_write( string, string, ?, )" },
{ "bool modbus_write( string, byte, string, int, ?, int )" },
{ "bool modbus_write( string, byte, string, int, ? )" },
{ "11.1 GUI Setting" },
{ "11.2 svr_read()" },
{ "? svr_read( string )" },
{ "11.3 svr_write()" },
{ "bool svr_write( string, ? )" },
{ "11.4 Data Table" },
{ "11.5 Communication Protocol" },
{ "11.6 TMSVR" },
{ "12.1 profinet_read_input()" },
{ "byte[] profinet_read_input( int, int )" },
{ "byte profinet_read_input( int, )" },
{ "? profinet_read_input( string, int, int )" },
{ "? profinet_read_input( string, int, )" },
{ "? profinet_read_input( string )" },
{ "12.2 profinet_read_input_int()" },
{ "int[] profinet_read_input_int( int, int, int )" },
{ "int[] profinet_read_input_int( int, int )" },
{ "int profinet_read_input_int( int )" },
{ "12.3 profinet_read_input_float()" },
{ "float[] profinet_read_input_float( int, int, int )" },
{ "float[] profinet_read_input_float( int, int )" },
{ "float profinet_read_input_float(   315 int )" },
{ "12.4 profinet_read_input_string()" },
{ "string profinet_read_input_string( int, int )" },
{ "12.5 profinet_read_input_bit()" },
{ "byte profinet_read_input_bit( int, int )" },
{ "byte profinet_read_input_bit( string, int )" },
{ "byte[] profinet_read_input_bit( int, int, int )" },
{ "byte[] profinet_read_input_bit( string, int, int )" },
{ "12.6 profinet_read_output()" },
{ "byte[] profinet_read_output( int, int )" },
{ "byte profinet_read_output( int )" },
{ "? profinet_read_output( string, int, int )" },
{ "? profinet_read_output( string, int, )" },
{ "? profinet_read_output( string )" },
{ "12.7 profinet_read_output_int()" },
{ "int[] profinet_read_output_int( int, int, int )" },
{ "int[] profinet_read_output_int( int, int )" },
{ "int profinet_read_output_int( int )" },
{ "12.8 profinet_read_output_float()" },
{ "float[] profinet_read_output_float( int, int, int )" },
{ "float[] profinet_read_output_float( int, int )" },
{ "float profinet_read_output_float( int )" },
{ "12.9 profinet_read_output_string()" },
{ "string profinet_read_output_string( int, int )" },
{ "12.10 profinet_read_output_bit()" },
{ "byte profinet_read_output_bit( int, int )" },
{ "byte profinet_read_output_bit( string, int )" },
{ "byte[] profinet_read_output_bit( int, int, int )" },
{ "byte[] profinet_read_output_bit( string, int, int )" },
{ "12.11 profinet_write_output()" },
{ "bool profinet_write_output ( int, ?, int )" },
{ "bool profinet_write_output( int, ? )" },
{ "bool profinet_write_output( int, ?, int, int )" },
{ "bool profinet_write_output( string, int, ? int, int )" },
{ "bool profinet_write_output( string, int, ? int )" },
{ "bool profinet_write_output( string, int, ? )" },
{ "bool profinet_write_output( string, ? )" },
{ "12.12 profinet_write_output_bit()" },
{ "bool profinet_write_output_bit( int, int, int )" },
{ "bool profient_write_output_bit( string, int,   340 int )" },
{ "bool profinet_write_output_bit( int, int, byte[], int, int )" },
{ "bool profinet_write_output_bit( int, int, byte[] )" },
{ "bool profinet_write_output_bit( string, int, byte[], int, int )" },
{ "bool profinet_write_output_bit( string, int, byte[], int )" },
{ "bool profinet_write_output_bit( string, int, byte[] )" },
{ "13.1 eip_read_input()" },
{ "byte[] eip_read_input( int, int )" },
{ "byte eip_read_input( int, )" },
{ "? eip_read_input( string, int, int )" },
{ "? eip_read_input( string, int, )" },
{ "? eip_read_input( string )" },
{ "13.2 eip_read_input_int()" },
{ "int[] eip_read_input_int(   350 int, int, int )" },
{ "int[] eip_read_input_int( int, int )" },
{ "int eip_read_input_int( int )" },
{ "13.3 eip_read_input_float()" },
{ "float[] eip_read_input_float( int, int, int )" },
{ "float[] eip_read_input_float( int, int )" },
{ "float eip_read_input_float( int )" },
{ "13.4 eip_read_input_string()" },
{ "string eip_read_input_string( int, int )" },
{ "13.5 eip_read_input_bit()" },
{ "byte eip_read_input_bit( int, int )" },
{ "byte eip_read_input_bit( string, int )" },
{ "byte[] eip_read_input_bit( int, int, int )" },
{ "byte[] eip_read_input_bit( string, int, int )" },
{ "13.6 eip_read_output()" },
{ "byte[] eip_read_output( int, int )" },
{ "byte eip_read_output( int )" },
{ "? eip_read_output( string, int, int )" },
{ "? eip_read_output( string, int, )" },
{ "? eip_read_output( string )" },
{ "13.7 eip_read_output_int()" },
{ "int[] eip_read_output_int( int, int, int )" },
{ "int[] eip_read_output_int( int, int )" },
{ "int eip_read_output_int( int )" },
{ "13.8 eip_read_output_float()" },
{ "float[] eip_read_output_float( int, int, int )" },
{ "float[] eip_read_output_float( int, int )" },
{ "float eip_read_output_float( int )" },
{ "13.9 eip_read_output_string()" },
{ "string eip_read_output_string( int, int )" },
{ "13.10 eip_read_output_bit()" },
{ "byte eip_read_output_bit( int, int )" },
{ "byte eip_read_output_bit( string, int )" },
{ "byte[] eip_read_output_bit( int, int, int )" },
{ "byte[] eip_read_output_bit( string, int, int )" },
{ "13.11 eip_write_output()" },
{ "bool eip_write_output( int, ?, int )" },
{ "bool eip_write_output( int, ? )" },
{ "bool eip_write_output( int, ?, int, int )" },
{ "bool eip_write_output( string, int, ? int, int )" },
{ "bool eip_write_output( string, int,   376 ? int )" },
{ "bool eip_write_output( string, int, ? )" },
{ "bool eip_write_output( string, ? )" },
{ "13.12 eip_write_output_bit()" },
{ "bool eip_write_output_bit( int, int, int )" },
{ "bool eip_write_output_bit( string, int, int )" },
{ "bool eip_write_output_bit( int, int, byte[], int, int )" },
{ "bool eip_write_output_bit( int, int,   381 byte[], int )" },
{ "bool eip_write_output_bit( int, int, byte[] )" },
{ "bool eip_write_output_bit( string, int, byte[], int, int )" },
{ "bool eip_write_output_bit( string, int, byte[],   383 int )" },
{ "bool eip_write_output_bit( string, int, byte[] )" },
                }
            },
            {TMflowVersions.V1_80_xxxx, new List<string>()
                {
{ "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Append()" },
{ "?[] Array_Append(?[],? or ?[])" },
{ "2.24 Array_Insert()" },
{ "?[] Array_Insert(?[],int,? or ?[])" },
{ "2.25 Array_Remove()" },
{ "?[] Array_Remove(?[],int,int)" },
{ "?[] Array_Remove(?[],int)" },
{ "2.26 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],vvint,?[],int,int)" },
{ "2.27 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.28 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.29 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.30 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.31 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.32 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.33 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.34 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.35 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.36 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.37 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.38 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.39 Length()" },
{ "int Length(?)" },
{ "2.40 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.41 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.42 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.43 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.44 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.45 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.46 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.47 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "2.48 ListenSend()" },
{ "int ListenSend(string,int,?)" },
{ "int ListenSend(int,?)" },
{ "2.49 VarSync()" },
{ "int VarSync(int,int,?)" },
{ "int VarSync(int,?)" },
{ "int VarSync(?)" },
{ "3.1 abs()" },
{ "int abs(int)" },
{ "float abs(float)" },
{ "double abs(double)" },
{ "3.2 pow()" },
{ "int pow(int,double)" },
{ "float pow(float,double)" },
{ "double pow(double,double)" },
{ "3.3 sqrt()" },
{ "float sqrt(float)" },
{ "double sqrt(double)" },
{ "3.4 ceil()" },
{ "float ceil(float)" },
{ "double ceil(double)" },
{ "3.5 floor()" },
{ "float floor(float)" },
{ "double floor(double)" },
{ "3.6 round()" },
{ "float round(float,int)" },
{ "float round(float)" },
{ "double round(double,int)" },
{ "double round(double)" },
{ "3.7 random()" },
{ "float random()" },
{ "int random(int)" },
{ "int random(int,int)" },
{ "3.8 d2r()" },
{ "float d2r(float)" },
{ "double d2r(double)" },
{ "3.9 r2d()" },
{ "float r2d(float)" },
{ "double r2d(double)" },
{ "3.10 sin()" },
{ "float sin(float)" },
{ "double sin(double)" },
{ "3.11 cos()" },
{ "float cos(float)" },
{ "double cos(double)" },
{ "3.12 tan()" },
{ "float tan(float)" },
{ "double tan(double)" },
{ "3.13 asin()" },
{ "float asin(float)" },
{ "double asin(double)" },
{ "3.14 acos()" },
{ "float acos(float)" },
{ "double acos(double)" },
{ "3.15 atan()" },
{ "float atan(float)" },
{ "double atan(double)" },
{ "3.16 atan2()" },
{ "float atan2(float,float)" },
{ "double atan2(double,double)" },
{ "3.17 log()" },
{ "float log(float,double)" },
{ "double log(double,double)" },
{ "float log(float)" },
{ "double log(double)" },
{ "3.18 log10()" },
{ "float log10(float)" },
{ "double log10(double)" },
{ "3.19 norm2()" },
{ "float norm2(float[])" },
{ "3.20 dist()" },
{ "float dist(float[],float[])" },
{ "3.21 trans()" },
{ "float[] trans(float[],float[])" },
{ "3.22 inversetrans()" },
{ "float[] inversetrans(float[])" },
{ "3.23 applytrans()" },
{ "float[] applytrans(float[],float[])" },
{ "3.24 interpoint()" },
{ "float[] interpoint(float[],float[],float)" },
{ "3.25 changeref()" },
{ "float[] changeref(float[],float[],float[])" },
{ "float[] changeref(float[],float[])" },
{ "4.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "4.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "4.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "4.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "4.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "4.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "4.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "5.1 com_read()" },
{ "byte[] com_read(string)" },
{ "byte[] com_read(string,int,int)" },
{ "byte[] com_read(string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string)" },
{ "byte[] com_read(string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string)" },
{ "5.2 com_read_string()" },
{ "string com_read_string(string)" },
{ "string com_read_string(string,int,int)" },
{ "string com_read_string(string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string)" },
{ "string com_read_string(string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string)" },
{ "5.3 com_write()" },
{ "bool com_write(string,?)" },
{ "bool com_write(string,?,int,int)" },
{ "bool com_write(string,?,int)" },
{ "5.4 com_writeline()" },
{ "bool com_writeline(string,?)" },
{ "bool com_writeline(string,?,int,int)" },
{ "bool com_writeline(string,?,int)" },
{ "6.1 Point" },
{ "Point[string].attribute" },
{ "6.2 Base" },
{ "Base[string].attribute" },
{ "Base[string, int].attribute" },
{ "6.3 TCP" },
{ "TCP[string].attribute" },
{ "6.4 VPoint" },
{ "VPoint[string].attribute" },
{ "6.5 IO" },
{ "IO[string].attribute" },
{ "6.6 Robot" },
{ "Robot[int].attribute" },
{ "6.7 FT" },
{ "FT[string].attribute" },
{ "7.2 ScriptExit()" },
{ "bool ScriptExit()" },
{ "8.1 QueueTag()" },
{ "bool QueueTag(int,int)" },
{ "bool QueueTag(int)" },
{ "8.2 WaitQueueTag()" },
{ "int WaitQueueTag(int,int)" },
{ "int WaitQueueTag(int)" },
{ "8.3 StopAndClearBuffer()" },
{ "bool StopAndClearBuffer()" },
{ "8.4 Pause()" },
{ "bool Pause()" },
{ "8.5 Resume()" },
{ "bool Resume()" },
{ "8.6 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "8.7 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.8 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "8.9 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "8.10 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.11 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.12 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "8.13 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "8.14 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "8.15 ChangeLoad()" },
{ "bool ChangeLoad(float)" },
{ "8.16 PVTEnter()" },
{ "bool PVTEnter(int)" },
{ "bool PVTEnter()" },
{ "8.17 PVTExit()" },
{ "bool PVTExit()" },
{ "8.18 PVTPoint()" },
{ "bool PVTPoint(float[],float[],float)" },
{ "bool PVTPoint(float, float, float, float, float, float,float, float, float, float, float, float,float)" },
{ "8.19 PVTPause()" },
{ "bool PVTPause()" },
{ "8.20 PVTResume()" },
{ "bool PVTResume()" },
{ "8.21 socket_send()" },
{ "int socket_send(string,int,?int,int,)" },
{ "int socket_send(string,int,?)" },
                }
            },
            {TMflowVersions.V1_76_xxxx, new List<string>()
                {

{ "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Append()" },
{ "?[] Array_Append(?[],? or ?[])" },
{ "2.24 Array_Insert()" },
{ "?[] Array_Insert(?[],int,? or ?[])" },
{ "2.25 Array_Remove()" },
{ "?[] Array_Remove(?[],int,int)" },
{ "?[] Array_Remove(?[],int)" },
{ "2.26 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],vvint,?[],int,int)" },
{ "2.27 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.28 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.29 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.30 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.31 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.32 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.33 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.34 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.35 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.36 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.37 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.38 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.39 Length()" },
{ "int Length(?)" },
{ "2.40 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.41 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.42 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.43 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.44 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.45 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.46 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.47 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "2.48 ListenSend()" },
{ "int ListenSend(string,int,?)" },
{ "int ListenSend(int,?)" },
{ "2.49 VarSync()" },
{ "int VarSync(int,int,?)" },
{ "int VarSync(int,?)" },
{ "int VarSync(?)" },
{ "3.1 abs()" },
{ "int abs(int)" },
{ "float abs(float)" },
{ "double abs(double)" },
{ "3.2 pow()" },
{ "int pow(int,double)" },
{ "float pow(float,double)" },
{ "double pow(double,double)" },
{ "3.3 sqrt()" },
{ "float sqrt(float)" },
{ "double sqrt(double)" },
{ "3.4 ceil()" },
{ "float ceil(float)" },
{ "double ceil(double)" },
{ "3.5 floor()" },
{ "float floor(float)" },
{ "double floor(double)" },
{ "3.6 round()" },
{ "float round(float,int)" },
{ "float round(float)" },
{ "double round(double,int)" },
{ "double round(double)" },
{ "3.7 random()" },
{ "float random()" },
{ "int random(int)" },
{ "int random(int,int)" },
{ "3.8 d2r()" },
{ "float d2r(float)" },
{ "double d2r(double)" },
{ "3.9 r2d()" },
{ "float r2d(float)" },
{ "double r2d(double)" },
{ "3.10 sin()" },
{ "float sin(float)" },
{ "double sin(double)" },
{ "3.11 cos()" },
{ "float cos(float)" },
{ "double cos(double)" },
{ "3.12 tan()" },
{ "float tan(float)" },
{ "double tan(double)" },
{ "3.13 asin()" },
{ "float asin(float)" },
{ "double asin(double)" },
{ "3.14 acos()" },
{ "float acos(float)" },
{ "double acos(double)" },
{ "3.15 atan()" },
{ "float atan(float)" },
{ "double atan(double)" },
{ "3.16 atan2()" },
{ "float atan2(float,float)" },
{ "double atan2(double,double)" },
{ "3.17 log()" },
{ "float log(float,double)" },
{ "double log(double,double)" },
{ "float log(float)" },
{ "double log(double)" },
{ "3.18 log10()" },
{ "float log10(float)" },
{ "double log10(double)" },
{ "3.19 norm2()" },
{ "float norm2(float[])" },
{ "3.20 dist()" },
{ "float dist(float[],float[])" },
{ "3.21 trans()" },
{ "float[] trans(float[],float[])" },
{ "3.22 inversetrans()" },
{ "float[] inversetrans(float[])" },
{ "3.23 applytrans()" },
{ "float[] applytrans(float[],float[])" },
{ "3.24 interpoint()" },
{ "float[] interpoint(float[],float[],float)" },
{ "3.25 changeref()" },
{ "float[] changeref(float[],float[],float[])" },
{ "float[] changeref(float[],float[])" },
{ "4.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "4.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "4.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "4.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "4.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "4.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "4.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "5.1 com_read()" },
{ "byte[] com_read(string)" },
{ "byte[] com_read(string,int,int)" },
{ "byte[] com_read(string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string,byte[] or string)" },
{ "byte[] com_read(string,byte[] or string,int,int)" },
{ "byte[] com_read(string,byte[] or string,int)" },
{ "byte[] com_read(string,byte[] or string)" },
{ "5.2 com_read_string()" },
{ "string com_read_string(string)" },
{ "string com_read_string(string,int,int)" },
{ "string com_read_string(string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string,byte[] or string)" },
{ "string com_read_string(string,byte[] or string,int,int)" },
{ "string com_read_string(string,byte[] or string,int)" },
{ "string com_read_string(string,byte[] or string)" },
{ "5.3 com_write()" },
{ "bool com_write(string,?)" },
{ "bool com_write(string,?,int,int)" },
{ "bool com_write(string,?,int)" },
{ "5.4 com_writeline()" },
{ "bool com_writeline(string,?)" },
{ "bool com_writeline(string,?,int,int)" },
{ "bool com_writeline(string,?,int)" },
{ "6.1 Point" },
{ "Point[string].attribute" },
{ "6.2 Base" },
{ "Base[string].attribute" },
{ "Base[string, int].attribute" },
{ "6.3 TCP" },
{ "TCP[string].attribute" },
{ "6.4 VPoint" },
{ "VPoint[string].attribute" },
{ "6.5 IO" },
{ "IO[string].attribute" },
{ "6.6 Robot" },
{ "Robot[int].attribute" },
{ "6.7 FT" },
{ "FT[string].attribute" },
{ "7.2 ScriptExit()" },
{ "bool ScriptExit()" },
{ "8.1 QueueTag()" },
{ "bool QueueTag(int,int)" },
{ "bool QueueTag(int)" },
{ "8.2 WaitQueueTag()" },
{ "int WaitQueueTag(int,int)" },
{ "int WaitQueueTag(int)" },
{ "8.3 StopAndClearBuffer()" },
{ "bool StopAndClearBuffer()" },
{ "8.4 Pause()" },
{ "bool Pause()" },
{ "8.5 Resume()" },
{ "bool Resume()" },
{ "8.6 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "8.7 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.8 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "8.9 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "8.10 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.11 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "8.12 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "8.13 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "8.14 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "8.15 ChangeLoad()" },
{ "bool ChangeLoad(float)" },
{ "8.16 PVTEnter()" },
{ "bool PVTEnter(int)" },
{ "bool PVTEnter()" },
{ "8.17 PVTExit()" },
{ "bool PVTExit()" },
{ "8.18 PVTPoint()" },
{ "bool PVTPoint(float[],float[],float)" },
{ "bool PVTPoint(float, float, float, float, float, float,float, float, float, float, float, float,float)" },
{ "8.19 PVTPause()" },
{ "bool PVTPause()" },
{ "8.20 PVTResume()" },
{ "bool PVTResume()" },
{ "8.21 socket_send()" },
{ "int socket_send(string,int,?int,int,)" },
{ "int socket_send(string,int,?)" },

                }
            },
            {TMflowVersions.V1_72_xxxx, new List<string>()
                {

{ "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],int,?[],int,int)" },
{ "2.24 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.25 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.26 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.27 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.28 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.29 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.30 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.31 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.32 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.33 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.34 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.35 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.36 Length()" },
{ "int Length(?)" },
{ "2.37 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.38 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.39 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.40 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.41 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.42 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.43 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.44 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "2.45 VarSync()" },
{ "int VarSync(int,int,?)" },
{ "int VarSync(int,?)" },
{ "int VarSync(?)" },
{ "3.1 abs()" },
{ "int abs(int)" },
{ "float abs(float)" },
{ "double abs(double)" },
{ "3.2 pow()" },
{ "int pow(int,double)" },
{ "float pow(float,double)" },
{ "double pow(double,double)" },
{ "3.3 sqrt()" },
{ "float sqrt(float)" },
{ "double sqrt(double)" },
{ "3.4 ceil()" },
{ "float ceil(float)" },
{ "double ceil(double)" },
{ "3.5 floor()" },
{ "float floor(float)" },
{ "double floor(double)" },
{ "3.6 round()" },
{ "float round(float,int)" },
{ "float round(float)" },
{ "double round(double,int)" },
{ "double round(double)" },
{ "3.7 random()" },
{ "float random()" },
{ "int random(int)" },
{ "int random(int,int)" },
{ "3.8 d2r()" },
{ "float d2r(float)" },
{ "double d2r(double)" },
{ "3.9 r2d()" },
{ "float r2d(float)" },
{ "double r2d(double)" },
{ "3.10 sin()" },
{ "float sin(float)" },
{ "double sin(double)" },
{ "3.11 cos()" },
{ "float cos(float)" },
{ "double cos(double)" },
{ "3.12 tan()" },
{ "float tan(float)" },
{ "double tan(double)" },
{ "3.13 asin()" },
{ "float asin(float)" },
{ "double asin(double)" },
{ "3.14 acos()" },
{ "float acos(float)" },
{ "double acos(double)" },
{ "3.15 atan()" },
{ "float atan(float)" },
{ "double atan(double)" },
{ "3.16 atan2()" },
{ "float atan2(float,float)" },
{ "double atan2(double,double)" },
{ "3.17 log()" },
{ "float log(float,double)" },
{ "double log(double,double)" },
{ "float log(float)" },
{ "double log(double)" },
{ "3.18 log10()" },
{ "float log10(float)" },
{ "double log10(double)" },
{ "3.19 norm2()" },
{ "float norm2(float[])" },
{ "3.20 dist()" },
{ "float dist(float[],float[])" },
{ "3.21 trans()" },
{ "float[] trans(float[],float[])" },
{ "3.22 inversetrans()" },
{ "float[] inversetrans(float[])" },
{ "3.23 applytrans()" },
{ "float[] applytrans(float[],float[])" },
{ "3.24 interpoint()" },
{ "float[] interpoint(float[],float[],float)" },
{ "3.25 changeref()" },
{ "float[] changeref(float[],float[],float[])" },
{ "float[] changeref(float[],float[])" },
{ "4.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "4.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "4.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "4.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "4.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "4.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "4.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "5.1 Point" },
{ "Point[string].attribute" },
{ "5.2 Base" },
{ "Base[string].attribute" },
{ "Base[string, int].attribute" },
{ "5.3 TCP" },
{ "TCP[string].attribute" },
{ "5.4 VPoint" },
{ "VPoint[string].attribute" },
{ "5.5 IO" },
{ "IO[string].attribute" },
{ "5.6 Robot" },
{ "Robot[int].attribute" },
{ "5.7 FT" },
{ "FT[string].attribute" },
{ "6.2 ScriptExit()" },
{ "bool ScriptExit()" },
{ "7.1 StopAndClearBuffer()" },
{ "bool StopAndClearBuffer()" },
{ "7.2 Pause()" },
{ "bool Pause()" },
{ "7.3 Resume()" },
{ "bool Resume()" },
{ "7.4 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "7.5 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "7.6 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "7.7 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "7.8 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "7.9 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "7.10 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "7.11 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "7.12 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "7.13 ChangeLoad()" },
{ "bool ChangeLoad(float)" },
{ "7.14 PVTEnter()" },
{ "bool PVTEnter(int)" },
{ "bool PVTEnter()" },
{ "7.15 PVTExit()" },
{ "bool PVTExit()" },
{ "7.16 PVTPoint()" },
{ "bool PVTPoint(float[],float[],float)" },
{ "bool PVTPoint(float, float, float, float, float, float,float, float, float, float, float, float,float)" },
{ "7.17 PVTPause()" },
{ "bool PVTPause()" },
{ "7.18 PVTResume()" },
{ "bool PVTResume()" },

                }
            },
            {TMflowVersions.V1_68_xxxx, new List<string>()
                {

{ "2.1 Byte_ToInt16()" },
{ "int Byte_ToInt16(byte[],int,int)" },
{ "int Byte_ToInt16(byte[],int)" },
{ "int Byte_ToInt16(byte[])" },
{ "2.2 Byte_ToInt32()" },
{ "int Byte_ToInt32(byte[],int)" },
{ "int Byte_ToInt32(byte[])" },
{ "2.3 Byte_ToFloat()" },
{ "float Byte_ToFloat(byte[],int)" },
{ "float Byte_ToFloat(byte[])" },
{ "2.4 Byte_ToDouble()" },
{ "double Byte_ToDouble(byte[],int)" },
{ "double Byte_ToDouble(byte[])" },
{ "2.5 Byte_ToInt16Array()" },
{ "int[] Byte_ToInt16Array(byte[],int,int)" },
{ "int[] Byte_ToInt16Array(byte[],int)" },
{ "int[] Byte_ToInt16Array(byte[])" },
{ "2.6 Byte_ToInt32Array()" },
{ "int[] Byte_ToInt32Array(byte[],int)" },
{ "int[] Byte_ToInt32Array(byte[])" },
{ "2.7 Byte_ToFloatArray()" },
{ "float[] Byte_ToFloatArray(byte[],int)" },
{ "float[] Byte_ToFloatArray(byte[])" },
{ "2.8 Byte_ToDoubleArray()" },
{ "double[] Byte_ToDoubleArray(byte[],int)" },
{ "double[] Byte_ToDoubleArray(byte[])" },
{ "2.9 Byte_ToString()" },
{ "string Byte_ToString(byte[],int)" },
{ "string Byte_ToString(byte[])" },
{ "2.10 Byte_Concat()" },
{ "byte[] Byte_Concat(byte[],byte)" },
{ "byte[] Byte_Concat(byte[],byte[])" },
{ "byte[] Byte_Concat(byte[],byte[],int)" },
{ "byte[] Byte_Concat(byte[],int,int,byte[],int,int)" },
{ "2.11 String_ToInteger()" },
{ "int String_ToInteger(string,int)" },
{ "int String_ToInteger(string)" },
{ "int[] String_ToInteger(string[],int)" },
{ "2.12 String_ToFloat()" },
{ "float String_ToFloat(string,int)" },
{ "float String_ToFloat(string)" },
{ "float[] String_ToFloat(string[],int)" },
{ "2.13 String_ToDouble()" },
{ "double String_ToDouble(string,int)" },
{ "double String_ToDouble(string)" },
{ "double[] String_ToDouble(string[],int)" },
{ "2.14 String_ToByte()" },
{ "byte[] String_ToByte(string,int)" },
{ "byte[] String_ToByte(string)" },
{ "2.15 String_IndexOf()" },
{ "int String_IndexOf(string,string)" },
{ "2.16 String_LastIndexOf()" },
{ "int String_LastIndexOf(string,string)" },
{ "2.17 String_Substring()" },
{ "string String_Substring(string,int,int)" },
{ "string String_Substring(string,int)" },
{ "string String_Substring(string,string,int)" },
{ "string String_Substring(string,string)" },
{ "string String_Substring(string,string,string,int)" },
{ "string String_Substring(string,string,string)" },
{ "2.18 String_Split()" },
{ "string[] String_Split(string,string,int)" },
{ "string[] String_Split(string,string)" },
{ "2.19 String_Replace()" },
{ "string String_Replace(string,string,string)" },
{ "2.20 String_Trim()" },
{ "string String_Trim(string)" },
{ "string String_Trim(string,string)" },
{ "string String_Trim(string,string,string)" },
{ "2.21 String_ToLower()" },
{ "string String_ToLower(string)" },
{ "2.22 String_ToUpper()" },
{ "string String_ToUpper(string)" },
{ "2.23 Array_Equals()" },
{ "bool Array_Equals(?[],?[])" },
{ "bool Array_Equals(?[],vvint,?[],int,int)" },
{ "2.24 Array_IndexOf()" },
{ "int Array_IndexOf(?[],?)" },
{ "2.25 Array_LastIndexOf()" },
{ "int Array_LastIndexOf(?[],?)" },
{ "2.26 Array_Reverse()" },
{ "?[] Array_Reverse(?[])" },
{ "?[] Array_Reverse(?[],int)" },
{ "2.27 Array_Sort()" },
{ "?[] Array_Sort(?[],int)" },
{ "?[] Array_Sort(?[])" },
{ "2.28 Array_SubElements()" },
{ "?[] Array_SubElements(?[],int,int)" },
{ "?[] Array_SubElements(?[],int)" },
{ "2.29 ValueReverse()" },
{ "int ValueReverse(int,int)" },
{ "int ValueReverse(int)" },
{ "float ValueReverse(float)" },
{ "double ValueReverse(double)" },
{ "string ValueReverse(string)" },
{ "int[] ValueReverse(int[],int)" },
{ "int[] ValueReverse(int[])" },
{ "float[] ValueReverse(float[])" },
{ "double[] ValueReverse(double[])" },
{ "string[] ValueReverse(string[])" },
{ "2.30 GetBytes()" },
{ "byte[] GetBytes(?,int)" },
{ "byte[] GetBytes(?)" },
{ "byte[] GetBytes(int,int,int)" },
{ "byte[] GetBytes(int[],int,int)" },
{ "2.31 GetString()" },
{ "string GetString(?,int,int)" },
{ "string GetString(?,int)" },
{ "string GetString(?)" },
{ "string GetString(?,string,int,int)" },
{ "string GetString(?,string,int)" },
{ "string GetString(?,string)" },
{ "string GetString(?,string,string,int,int)" },
{ "string GetString(?,string,string,int)" },
{ "string GetString(?,string,string)" },
{ "2.32 GetToken()" },
{ "string GetToken(string,string,string,int,int)" },
{ "string GetToken(string,string,string,int)" },
{ "string GetToken(string,string,string)" },
{ "string GetToken(string,byte[],byte[],int,int)" },
{ "string GetToken(string,byte[],byte[],int)" },
{ "string GetToken(string,byte[],byte[])" },
{ "byte[] GetToken(byte[],string,string,int,int)" },
{ "byte[] GetToken(byte[],string,string,int)" },
{ "byte[] GetToken(byte[],string,string)" },
{ "byte[] GetToken(byte[],byte[],byte[],int,int)" },
{ "byte[] GetToken(byte[],byte[],byte[],int)" },
{ "byte[] GetToken(byte[],byte[],byte[])" },
{ "2.33 GetAllTokens()" },
{ "string[] GetAllTokens(string,string,string,int)" },
{ "string[] GetAllTokens(string,string,string)" },
{ "2.34 GetNow()" },
{ "string GetNow(string)" },
{ "string GetNow()" },
{ "2.35 GetNowStamp()" },
{ "int GetNowStamp()" },
{ "double GetNowStamp(bool)" },
{ "int GetNowStamp(int)" },
{ "double GetNowStamp(double)" },
{ "bool GetNowStamp(int,int)" },
{ "bool GetNowStamp(double,double)" },
{ "2.36 Length()" },
{ "int Length(?)" },
{ "2.37 Ctrl()" },
{ "string Ctrl(int)" },
{ "string Ctrl(string)" },
{ "string Ctrl(byte[])" },
{ "2.38 XOR8()" },
{ "byte XOR8(byte[],int,int)" },
{ "byte XOR8(byte[],int)" },
{ "byte XOR8(byte[])" },
{ "2.39 SUM8()" },
{ "byte SUM8(byte[],int,int)" },
{ "byte SUM8(byte[],int)" },
{ "byte SUM8(byte[])" },
{ "2.40 SUM16()" },
{ "byte[] SUM16(byte[],int,int)" },
{ "byte[] SUM16(byte[],int)" },
{ "byte[] SUM16(byte[])" },
{ "2.41 SUM32()" },
{ "byte[] SUM32(byte[],int,int)" },
{ "byte[] SUM32(byte[],int)" },
{ "byte[] SUM32(byte[])" },
{ "2.42 CRC16()" },
{ "byte[] CRC16(int,byte[],int,int)" },
{ "byte[] CRC16(int,byte[],int)" },
{ "byte[] CRC16(int,byte[])" },
{ "byte[] CRC16(byte[],int,int)" },
{ "byte[] CRC16(byte[],int)" },
{ "byte[] CRC16(byte[])" },
{ "2.43 CRC32()" },
{ "byte[] CRC32(byte[],int,int)" },
{ "byte[] CRC32(byte[],int)" },
{ "byte[] CRC32(byte[])" },
{ "2.44 RMS_VarSync()" },
{ "int RMS_VarSync(int,int,?)" },
{ "int RMS_VarSync(int,?)" },
{ "int RMS_VarSync(?)" },
{ "2.45 ListenPacket()" },
{ "string ListenPacket(string,string)" },
{ "string ListenPacket(string)" },
{ "3.1 modbus_read()" },
{ "? modbus_read(string,string)" },
{ "byte[] modbus_read(string,byte,string,int,int)" },
{ "3.2 modbus_read_int16()" },
{ "int[] modbus_read_int16(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int16(string,byte,string,int,int)" },
{ "3.3 modbus_read_int32()" },
{ "int[] modbus_read_int32(string,byte,string,int,int,int)" },
{ "int[] modbus_read_int32(string,byte,string,int,int)" },
{ "3.4 modbus_read_float()" },
{ "float[] modbus_read_float(string,byte,string,int,int,int)" },
{ "float[] modbus_read_float(string,byte,string,int,int)" },
{ "3.5 modbus_read_double()" },
{ "double[] modbus_read_double(string,byte,string,int,int,int)" },
{ "double[] modbus_read_double(string,byte,string,int,int)" },
{ "3.6 modbus_read_string()" },
{ "string modbus_read_string(string,byte,string,int,int,int)" },
{ "string modbus_read_string(string,byte,string,int,int)" },
{ "3.7 modbus_write()" },
{ "bool modbus_write(string,string,?,int)" },
{ "bool modbus_write(string,string,?,)" },
{ "bool modbus_write(string,byte,string,int,?,int)" },
{ "bool modbus_write(string,byte,string,int,?)" },
{ "4.1 Listen Node" },
{ "4.2 ScriptExit()" },
{ "bool ScriptExit()" },
{ "4.3 Communication Protocol" },
{ "4.4 TMSCT" },
{ "4.5 TMSTA" },
{ "4.6 CPERR" },
{ "5.1 PTP()" },
{ "bool PTP(string,float[],int,int,int,bool)" },
{ "bool PTP(string,float[],int,int,int,bool,int[])" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "bool PTP(string,float, float, float, float, float, float,int,int,int,bool,int, int, int)" },
{ "417.50,-122.30,343.90,180.00,0.0" },
{ "5.2 Line()" },
{ "bool Line(string,float[],int,int,int,bool)" },
{ "bool Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "417.50,-122.30,343.90,180.00,0.0" },
{ "5.3 Circle()" },
{ "bool Circle(string,float[],float[],int,int,int,int,bool)" },
{ "bool Circle(string,float, float, float, float, float, float,float, float, float, float, float, float,int,int,int,int,bool)" },
{ "381.70,208.74,343.90,180.00,0.00,135.00,100,200,50,270,false)" },
{ "417.50,-122.30,343.90,180.00,0.00,90.00, end point = 381.70,208.74,343.90,180.00,0.00,135.00" },
{ "5.4 PLine()" },
{ "bool PLine(string,float[],int,int,int)" },
{ "bool PLine(string,float, float, float, float, float, float,int,int,int)" },
{ "5.5 Move_PTP()" },
{ "bool Move_PTP(string,float[],int,int,int,bool)" },
{ "bool Move_PTP(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "5.6 Move_Line()" },
{ "bool Move_Line(string,float[],int,int,int,bool)" },
{ "bool Move_Line(string,float, float, float, float, float, float,int,int,int,bool)" },
{ "5.7 Move_PLine()" },
{ "bool Move_PLine(string,float[],int,int,int)" },
{ "bool Move_PLine(string,float, float, float, float, float, float,int,int,int,)" },
{ "5.8 ChangeBase()" },
{ "bool ChangeBase(string)" },
{ "bool ChangeBase(float[])" },
{ "bool ChangeBase(float, float, float, float, float, float)" },
{ "5.9 ChangeTCP()" },
{ "bool ChangeTCP(string)" },
{ "bool ChangeTCP(float[])" },
{ "bool ChangeTCP(float[],float)" },
{ "bool ChangeTCP(float[],float,float[])" },
{ "bool ChangeTCP(float, float, float, float, float, float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float)" },
{ "bool ChangeTCP(float, float, float, float, float, float,float,float, float, float, float, float, float, float, float, float)" },
{ "5.10 ChangeLoad()" },
{ "bool ChangeLoad(float)" },

                }
            }
        };
    }
}
